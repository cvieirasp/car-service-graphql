package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"

	"github.com/cvieirasp/car-service-graphql/graph/model"
)

// Services is the resolver for the services field.
func (r *categoryResolver) Services(ctx context.Context, obj *model.Category) ([]*model.Service, error) {
	services, err := r.ServiceDB.FindByCategoryID(obj.ID)
	if err != nil {
		return nil, err
	}
	var result []*model.Service
	for _, service := range services {
		result = append(result, &model.Service{
			ID:          service.ID,
			Description: service.Description,
			Price:       service.Price,
		})
	}
	return result, nil
}

// Orders is the resolver for the orders field.
func (r *customerResolver) Orders(ctx context.Context, obj *model.Customer) ([]*model.Order, error) {
	orders, err := r.OrderDB.FindByCustomerID(obj.ID)
	if err != nil {
		return nil, err
	}
	var result []*model.Order
	for _, order := range orders {
		result = append(result, &model.Order{
			ID:          order.ID,
			RequestDate: order.RequestDate,
			Status:      order.Status,
		})
	}
	return result, nil
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	category, err := r.CategoryDB.Create(input.Name)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:   category.ID,
		Name: category.Name,
	}, nil
}

// CreateService is the resolver for the createService field.
func (r *mutationResolver) CreateService(ctx context.Context, input model.NewService) (*model.Service, error) {
	service, err := r.ServiceDB.Create(input.Description, input.Price, input.CategoryID)
	if err != nil {
		return nil, err
	}
	return &model.Service{
		ID:          service.ID,
		Description: service.Description,
		Price:       service.Price,
	}, nil
}

// CreateCustomer is the resolver for the createCustomer field.
func (r *mutationResolver) CreateCustomer(ctx context.Context, input model.NewCustomer) (*model.Customer, error) {
	customer, err := r.CustomerDB.Create(input.Name, input.Address)
	if err != nil {
		return nil, err
	}
	return &model.Customer{
		ID:      customer.ID,
		Name:    customer.Name,
		Address: customer.Address,
	}, nil
}

// CreateVehicle is the resolver for the createVehicle field.
func (r *mutationResolver) CreateVehicle(ctx context.Context, input model.NewVehicle) (*model.Vehicle, error) {
	vehicle, err := r.VehicleDB.Create(input.Brand, input.Model, input.Year)
	if err != nil {
		return nil, err
	}
	return &model.Vehicle{
		ID:    vehicle.ID,
		Brand: vehicle.Brand,
		Model: vehicle.Model,
		Year:  vehicle.Year,
	}, nil
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.NewOrder) (*model.Order, error) {
	order, err := r.OrderDB.Create(input.CustomerID, input.VehicleID, input.ServiceID, input.RequestDate, input.Status)
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:          order.ID,
		RequestDate: order.RequestDate,
		Status:      order.Status,
	}, nil
}

// Customer is the resolver for the Customer field.
func (r *orderResolver) Customer(ctx context.Context, obj *model.Order) (*model.Customer, error) {
	customer, err := r.CustomerDB.FindByOrderID(obj.ID)
	if err != nil {
		return nil, err
	}
	return &model.Customer{
		ID:      customer.ID,
		Name:    customer.Name,
		Address: customer.Address,
	}, nil
}

// Vehicle is the resolver for the Vehicle field.
func (r *orderResolver) Vehicle(ctx context.Context, obj *model.Order) (*model.Vehicle, error) {
	vehicle, err := r.VehicleDB.FindByOrderID(obj.ID)
	if err != nil {
		return nil, err
	}
	return &model.Vehicle{
		ID:    vehicle.ID,
		Brand: vehicle.Brand,
		Model: vehicle.Model,
		Year:  vehicle.Year,
	}, nil
}

// Service is the resolver for the Service field.
func (r *orderResolver) Service(ctx context.Context, obj *model.Order) (*model.Service, error) {
	service, err := r.ServiceDB.FindByOrderID(obj.ID)
	if err != nil {
		return nil, err
	}
	return &model.Service{
		ID:          service.ID,
		Description: service.Description,
		Price:       service.Price,
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryDB.FindAll()
	if err != nil {
		return nil, err
	}
	var result []*model.Category
	for _, category := range categories {
		result = append(result, &model.Category{
			ID:   category.ID,
			Name: category.Name,
		})
	}
	return result, nil
}

// Category is the resolver for the Category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	category, err := r.CategoryDB.FindByID(id)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:   category.ID,
		Name: category.Name,
	}, nil
}

// Services is the resolver for the services field.
func (r *queryResolver) Services(ctx context.Context) ([]*model.Service, error) {
	services, err := r.ServiceDB.FindAll()
	if err != nil {
		return nil, err
	}
	var result []*model.Service
	for _, service := range services {
		result = append(result, &model.Service{
			ID:          service.ID,
			Description: service.Description,
			Price:       service.Price,
		})
	}
	return result, nil
}

// Service is the resolver for the Service field.
func (r *queryResolver) Service(ctx context.Context, id string) (*model.Service, error) {
	service, err := r.ServiceDB.FindByID(id)
	if err != nil {
		return nil, err
	}
	return &model.Service{
		ID:          service.ID,
		Description: service.Description,
		Price:       service.Price,
	}, nil
}

// Customers is the resolver for the customers field.
func (r *queryResolver) Customers(ctx context.Context) ([]*model.Customer, error) {
	customers, err := r.CustomerDB.FindAll()
	if err != nil {
		return nil, err
	}
	var result []*model.Customer
	for _, customer := range customers {
		result = append(result, &model.Customer{
			ID:      customer.ID,
			Name:    customer.Name,
			Address: customer.Address,
		})
	}
	return result, nil
}

// Customer is the resolver for the Customer field.
func (r *queryResolver) Customer(ctx context.Context, id string) (*model.Customer, error) {
	customer, err := r.CustomerDB.FindByID(id)
	if err != nil {
		return nil, err
	}
	return &model.Customer{
		ID:      customer.ID,
		Name:    customer.Name,
		Address: customer.Address,
	}, nil
}

// Vehicles is the resolver for the vehicles field.
func (r *queryResolver) Vehicles(ctx context.Context) ([]*model.Vehicle, error) {
	vehicles, err := r.VehicleDB.FindAll()
	if err != nil {
		return nil, err
	}
	var result []*model.Vehicle
	for _, vehicle := range vehicles {
		result = append(result, &model.Vehicle{
			ID:    vehicle.ID,
			Brand: vehicle.Brand,
			Model: vehicle.Model,
			Year:  vehicle.Year,
		})
	}
	return result, nil
}

// Vehicle is the resolver for the Vehicle field.
func (r *queryResolver) Vehicle(ctx context.Context, id string) (*model.Vehicle, error) {
	vehicle, err := r.VehicleDB.FindByID(id)
	if err != nil {
		return nil, err
	}
	return &model.Vehicle{
		ID:    vehicle.ID,
		Brand: vehicle.Brand,
		Model: vehicle.Model,
		Year:  vehicle.Year,
	}, nil
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	orders, err := r.OrderDB.FindAll()
	if err != nil {
		return nil, err
	}
	var result []*model.Order
	for _, order := range orders {
		result = append(result, &model.Order{
			ID:          order.ID,
			RequestDate: order.RequestDate,
			Status:      order.Status,
		})
	}
	return result, nil
}

// Order is the resolver for the Order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	order, err := r.OrderDB.FindByID(id)
	if err != nil {
		return nil, err
	}
	return &model.Order{
		ID:          order.ID,
		RequestDate: order.RequestDate,
		Status:      order.Status,
	}, nil
}

// Category is the resolver for the Category field.
func (r *serviceResolver) Category(ctx context.Context, obj *model.Service) (*model.Category, error) {
	category, err := r.CategoryDB.FindByServiceID(obj.ID)
	if err != nil {
		return nil, err
	}
	return &model.Category{
		ID:   category.ID,
		Name: category.Name,
	}, nil
}

// Orders is the resolver for the orders field.
func (r *serviceResolver) Orders(ctx context.Context, obj *model.Service) ([]*model.Order, error) {
	orders, err := r.OrderDB.FindByServiceID(obj.ID)
	if err != nil {
		return nil, err
	}
	var result []*model.Order
	for _, order := range orders {
		result = append(result, &model.Order{
			ID:          order.ID,
			RequestDate: order.RequestDate,
			Status:      order.Status,
		})
	}
	return result, nil
}

// Orders is the resolver for the orders field.
func (r *vehicleResolver) Orders(ctx context.Context, obj *model.Vehicle) ([]*model.Order, error) {
	orders, err := r.OrderDB.FindByVehicleID(obj.ID)
	if err != nil {
		return nil, err
	}
	var result []*model.Order
	for _, order := range orders {
		result = append(result, &model.Order{
			ID:          order.ID,
			RequestDate: order.RequestDate,
			Status:      order.Status,
		})
	}
	return result, nil
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Customer returns CustomerResolver implementation.
func (r *Resolver) Customer() CustomerResolver { return &customerResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Order returns OrderResolver implementation.
func (r *Resolver) Order() OrderResolver { return &orderResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Service returns ServiceResolver implementation.
func (r *Resolver) Service() ServiceResolver { return &serviceResolver{r} }

// Vehicle returns VehicleResolver implementation.
func (r *Resolver) Vehicle() VehicleResolver { return &vehicleResolver{r} }

type categoryResolver struct{ *Resolver }
type customerResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type serviceResolver struct{ *Resolver }
type vehicleResolver struct{ *Resolver }
